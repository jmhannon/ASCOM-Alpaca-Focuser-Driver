
# -*- coding: utf-8 -*-
#
# -----------------------------------------------------------------------------
# focuser.py - Alpaca API responders for Focuser
#
# Author:   Jim Hannon <jimmhannon@gmail.com> 
#
# -----------------------------------------------------------------------------
# Edit History:
#   Generated by Python Interface Generator for AlpycaDevice
#

import re
from config import Config
from falcon import Request, Response, HTTPBadRequest, before
from logging import Logger
from shr import PropertyResponse, MethodResponse, PreProcessRequest, \
                get_request_field, to_bool
from exceptions import *        # Nothing but exception classes
from devicecomm import *

logger: Logger = None

# ----------------------
# MULTI-INSTANCE SUPPORT
# ----------------------
# If this is > 0 then it means that multiple devices of this type are supported.
# Each responder on_get() and on_put() is called with a devnum parameter to indicate
# which instance of the device (0-based) is being called by the client. Leave this
# set to 0 for the simple case of controlling only one instance of this device type.
#
maxdev = 0                      # Single instance
port = Config.focuser0port
dconnected = False

# -----------
# DEVICE INFO
# -----------
# Static metadata not subject to configuration changes
## EDIT FOR YOUR DEVICE ##
class FocuserMetadata:
    Name = 'Rigel Focuser'
    Version = 'version 1'
    Description = 'Rigel Focuser'
    DeviceType = 'Focuser'
    DeviceID = '"255716ca-5515-4885-acd9-3f9377656d25"' # https://guidgenerator.com/online-guid-generator.aspx
    Info = 'Alpaca Device\nImplements Rigel Focuser in Moonlite protocol'
    MaxDeviceNumber = maxdev
    InterfaceVersion = 1

# --------------------
# RESOURCE CONTROLLERS
# --------------------

@before(PreProcessRequest(maxdev))
class Action:
    def on_put(self, req: Request, resp: Response, devnum: int):
        resp.text = MethodResponse(req, NotImplementedException()).json

@before(PreProcessRequest(maxdev))
class CommandBlind:
    def on_put(self, req: Request, resp: Response, devnum: int):
        resp.text = MethodResponse(req, NotImplementedException()).json

@before(PreProcessRequest(maxdev))
class CommandBool:
    def on_put(self, req: Request, resp: Response, devnum: int):
        resp.text = MethodResponse(req, NotImplementedException()).json

@before(PreProcessRequest(maxdev))
class CommandString():
    def on_put(self, req: Request, resp: Response, devnum: int):
        resp.text = MethodResponse(req, NotImplementedException()).json

@before(PreProcessRequest(maxdev))
class Description():
    def on_get(self, req: Request, resp: Response, devnum: int):
        resp.text = PropertyResponse(FocuserMetadata.Description, req).json

@before(PreProcessRequest(maxdev))
class DriverInfo():
    def on_get(self, req: Request, resp: Response, devnum: int):
        resp.text = PropertyResponse(FocuserMetadata.Info, req).json

@before(PreProcessRequest(maxdev))
class InterfaceVersion():
    def on_get(self, req: Request, resp: Response, devnum: int):
        resp.text = PropertyResponse(FocuserMetadata.InterfaceVersion, req).json

@before(PreProcessRequest(maxdev))
class DriverVersion():
    def on_get(self, req: Request, resp: Response, devnum: int):
        resp.text = PropertyResponse(FocuserMetadata.Version, req).json

@before(PreProcessRequest(maxdev))
class Name():
    def on_get(self, req: Request, resp: Response, devnum: int):
        resp.text = PropertyResponse(FocuserMetadata.Name, req).json

@before(PreProcessRequest(maxdev))
class SupportedActions():
    def on_get(self, req: Request, resp: Response, devnum: int):
        resp.text = PropertyResponse([], req).json  # Not PropertyNotImplemented
        
@before(PreProcessRequest(maxdev))
class connected:  
    def on_get(self, req: Request, resp: Response, devnum: int):
         global dconnected
         if not devicecom.connect(port):
            
            dconnected = False
         else:
            try:
                 val = devicecom.txrx(b':GV#',3) 
               
                 val = str(val,'UTF-8')
                 # test length of val
                 if (len(val)== 3):
                     dconnected = True
                 else:
                     dconnected = False    
            except:
                dconnected = False
         resp.text = PropertyResponse(dconnected, req).json

    def on_put(self, req: Request, resp: Response, devnum: int):
        global dconnected
        conn_str = get_request_field('Connected', req)
        conn = to_bool(conn_str)     # Raises 400 Bad Request if str to bool fails
        try:
            if (conn):
                devicecom.connect(port)
                dconnected = True
            else:
                devicecom.disconnect()  
                dconnected = False          
            resp.text = MethodResponse(req).json
        except Exception as ex:
            resp.text = MethodResponse(None, req,
            DriverException(0x500, 'Focuser.{Memname} failed', ex)).json
        
        
        

@before(PreProcessRequest(maxdev))
class absolute:

    def on_get(self, req: Request, resp: Response, devnum: int):
        if not dconnected:
            resp.text = PropertyResponse(None, req,
                            NotConnectedException()).json
            return
        try:
            # ----------------------
            # True if the focuser is capable of absolute position; that is, being commanded to a specific step location
            val = True
            # ----------------------
            resp.text = PropertyResponse(val, req).json
        except Exception as ex:
            resp.text = PropertyResponse(None, req,
                            DriverException(0x500, 'Focuser.Absolute failed', ex)).json

@before(PreProcessRequest(maxdev))
class ismoving:

    def on_get(self, req: Request, resp: Response, devnum: int):
        if not devicecom.connect(port): ##IS DEV CONNECTED##:
            resp.text = PropertyResponse(None, req,
                            NotConnectedException()).json
            return
        try:
            # ----------------------
            # True if the focuser is currently moving to a new position. False if the focuser is stationary.
            val = devicecom.txrx(b':GI#',3)
            # ----------------------
            # convert 00 to False and 01 to True
            if (val == (b'00#')):
                val = False
            elif (val == (b'01#')):
                val = True
            else:
                raise Exception("bad ismoving data")
            resp.text = PropertyResponse(val, req).json
        except Exception as ex:
            resp.text = PropertyResponse(None, req,
                            DriverException(0x500, 'Focuser.Ismoving failed', ex)).json

@before(PreProcessRequest(maxdev))
class maxincrement:
    def on_get(self, req: Request, resp: Response, devnum: int):
        if (dconnected == False):
            resp.text = PropertyResponse(None, req,
                            NotConnectedException()).json
            return
        try:
            # ----------------------
            # Maximum increment size allowed by the focuser; i.e. the maximum number of steps allowed in one move operation.
            val = 65534 ## GET PROPERTY ## need to find out what is needed here
            # ----------------------
            resp.text = PropertyResponse(val, req).json
        except Exception as ex:
            resp.text = PropertyResponse(None, req,
                            DriverException(0x500, 'Focuser.Maxincrement failed', ex)).json

@before(PreProcessRequest(maxdev))
class maxstep:

    def on_get(self, req: Request, resp: Response, devnum: int):
        if (dconnected == False): 
            resp.text = PropertyResponse(None, req,
                            NotConnectedException()).json
            return
        try:
            # ----------------------
            # Maximum step position permitted. integer
            val = 65534 ## GET PROPERTY ## need to find out what is needed here
            # ----------------------
            resp.text = PropertyResponse(val, req).json
        except Exception as ex:
            resp.text = PropertyResponse(None, req,
                            DriverException(0x500, 'Focuser.Maxstep failed', ex)).json

@before(PreProcessRequest(maxdev))
class position:

    def on_get(self, req: Request, resp: Response, devnum: int):
        if not devicecom.connect(port): 
            resp.text = PropertyResponse(None, req,
                            NotConnectedException()).json
            return
        try:
            # ----------------------
            # Current focuser position, in steps. integer
            
            # ----------------------
            val = devicecom.txrx(b':GP#',5)
            # returns the current position where YYYY# is a four digit unsigned hex number
            # convert val to integer 
            val = str(val,'UTF-8')
            match = re.search(r'[A-Fa-f0-9]{4}#', val)
            if match:
             val = val[:-1] # remove # from end
             val = int(val,16) # convert to integer
            else:
             raise Exception("bad position data")
            resp.text = PropertyResponse(val, req).json
        except Exception as ex:
            resp.text = PropertyResponse(None, req,
                            DriverException(0x500, 'Focuser.Position failed', ex)).json

@before(PreProcessRequest(maxdev))
class stepsize:

    def on_get(self, req: Request, resp: Response, devnum: int):
        if (dconnected == False): ##IS DEV CONNECTED##:
            resp.text = PropertyResponse(None, req,
                            NotConnectedException()).json
            return
        try:
            # ----------------------
            # Step size (microns) for the focuser. integer
            val = 1 ## GET PROPERTY ##
            # ----------------------
            resp.text = PropertyResponse(val, req).json
        except Exception as ex:
            resp.text = PropertyResponse(None, req,
                            DriverException(0x500, 'Focuser.Stepsize failed', ex)).json

@before(PreProcessRequest(maxdev))
class tempcomp:
#  not implemented for now might add this later
    def on_get(self, req: Request, resp: Response, devnum: int):
        if (dconnected == False):
            resp.text = PropertyResponse(None, req,
                            NotImplementedException()).json
            return
        try:
            # ----------------------
            # Gets the state of temperature compensation mode (if available), else always False.
            val = False ## GET PROPERTY ##
            # ----------------------
            resp.text = PropertyResponse(val, req).json
        except Exception as ex:
            resp.text = PropertyResponse(None, req,
                            DriverException(0x500, 'Focuser.Tempcomp failed', ex)).json

    def on_put(self, req: Request, resp: Response, devnum: int):
        if (dconnected == False): ## IS DEV CONNECTED ##:
            resp.text = PropertyResponse(None, req,
                            NotConnectedException()).json
            return
        tempcompstr = get_request_field('TempComp', req)      # Raises 400 bad request if missing
        tempcomp = to_bool(tempcompstr)                       # Same here

        try:
            # -----------------------------
            # Sets the state of temperature compensation mode. bool
            # +# on -# off
            if (tempcomp):
              devicecom.tx(b':+#')
            else:
              devicecom.tx(b':-#')   
            resp.text = MethodResponse(req).json
        except Exception as ex:
            resp.text = MethodResponse(req,
                            DriverException(0x500, 'Focuser.Tempcomp failed', ex)).json

    

@before(PreProcessRequest(maxdev))
class tempcompavailable:

    def on_get(self, req: Request, resp: Response, devnum: int):
        if (dconnected == False):
            resp.text = PropertyResponse(None, req,
                            NotConnectedException()).json
            return
        try:
            # ----------------------
            # True if focuser has temperature compensation available.
            val = True
            # ----------------------
            resp.text = PropertyResponse(val, req).json
        except Exception as ex:
            resp.text = PropertyResponse(None, req,
                            DriverException(0x500, 'Focuser.Tempcompavailable failed', ex)).json

@before(PreProcessRequest(maxdev))
class temperature:

    def on_get(self, req: Request, resp: Response, devnum: int):
        if not  devicecom.connect(port): ##IS DEV CONNECTED##:
            resp.text = PropertyResponse(None, req,
                            NotConnectedException()).json
            return
        try:
            # ----------------------
            # Current ambient temperature as measured by the focuser.
            # :GT#
            # 	number($double)
            val = devicecom.txrx(b':GT#',5)
            val = str(val,'UTF-8')
            match = re.search(r'[A-Fa-f0-9]{4}#', val)
            if match:
             val = val[:-1] # remove # from end
             val = int(val,16)
             # convert to integer need to signed int
             val = -(val & 0x8000) | (val & 0x7fff)
             val = val/2.0
            else:
             raise Exception("bad temperature data")
            resp.text = PropertyResponse(val, req).json
        except Exception as ex:
            resp.text = PropertyResponse(None, req,
                            DriverException(0x500, 'Focuser.Temperature failed', ex)).json

@before(PreProcessRequest(maxdev))
class halt:

    def on_put(self, req: Request, resp: Response, devnum: int):
        if not devicecom.connect(port): ## IS DEV CONNECTED ##:
            resp.text = PropertyResponse(None, req,
                            NotConnectedException()).json
            return
        try:
            # -----------------------------
            # Immediately stop any focuser motion due to a previous Move(Int32) method call.
            # :FQ#
            ### DEVICE OPERATION(PARAM) ###
            # -----------------------------
            devicecom.tx(b':FQ#')
            resp.text = MethodResponse(req).json
        except Exception as ex:
            resp.text = MethodResponse(req,
                            DriverException(0x500, 'Focuser.Halt failed', ex)).json

@before(PreProcessRequest(maxdev))
class move:

    def on_put(self, req: Request, resp: Response, devnum: int):
        if not devicecom.connect(port):## IS DEV CONNECTED ##:
            resp.text = PropertyResponse(None, req,
                            NotConnectedException()).json
            return
        positionstr = get_request_field('Position', req)      # Raises 400 bad request if missing
        try:
            position = int(positionstr)
        except:
            resp.text = MethodResponse(req,
                            InvalidValueException(f'Position " + positionstr + " not a valid number.')).json
            return
        ### RANGE CHECK AS NEEDED ###       # Raise Alpaca InvalidValueException with details!
        try:
            # -----------------------------
            # Moves the focuser by the specified amount or to the specified position depending on the value of the Absolute property.
            # :SNYYYY#
            posh = str.format(':SN{:04X}#',position,16)   # set target position
            posh = bytes(posh,'utf-8')
            devicecom.tx(posh)
            devicecom.tx(b':FG#') # start the move
            resp.text = MethodResponse(req).json
        except Exception as ex:
            resp.text = MethodResponse(req,
                            DriverException(0x500, 'Focuser.Move failed', ex)).json

    

